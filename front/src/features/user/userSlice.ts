import { createAsyncThunk, createSlice, /*PayloadAction*/ } from '@reduxjs/toolkit';
import { RootState, /*AppThunk*/ } from '../../app/store';
import { PURGE } from 'redux-persist';

export interface userSliceState {
    jwt: string | null;
}

const initialState: userSliceState = {
    jwt: null
};

interface loginThunkParamType {
    userId: string;
    password: string;
}

interface loginThunkResponseType{
    jwt: string;
}

export const userSlice = createSlice({
  name: 'user',
  initialState,
  reducers: {
    
    // increment: (state) => {
    //   // Redux Toolkit allows us to write "mutating" logic in reducers. It
    //   // doesn't actually mutate the state because it uses the Immer library,
    //   // which detects changes to a "draft state" and produces a brand new
    //   // immutable state based off those changes
    //   state.value += 1;
    // },
    // decrement: (state) => {
    //   state.value -= 1;
    // },
    // // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action: PayloadAction<number>) => {
    //   state.value += action.payload;
    // },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
        .addCase(loginThunk.pending, state => {
            
        })
        .addCase(loginThunk.fulfilled, (state, action) => {
            state.jwt = action.payload.jwt;
        })
        .addCase(loginThunk.rejected, state => {
            
        })
        

        .addCase(PURGE, state => {
            console.log("purge reducer executed..");
            state = initialState;
            console.log(state);
        })

    //   .addCase(incrementAsync.pending, (state) => {
    //     state.status = 'loading';
    //   })
      
    //   .addCase(incrementAsync.rejected, (state) => {
    //     state.status = 'failed';
    //   });
  },
});


export const loginThunk = createAsyncThunk<loginThunkResponseType, loginThunkParamType, {state : RootState}>(
    "user/login", async (authentication, {getState}) => {
    
    const basePath = getState().serverInfo.backBasePath;

    const json = await fetch(`${basePath}/member/log-in`, {
        method:"post",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify({
            userId: authentication.userId,
            password: authentication.password
        })
    }).then(response => response.json());

    return json as loginThunkResponseType;
    // The value we return becomes the `fulfilled` action payload
  }
);



//export const { increment, decrement, incrementByAmount } = counterSlice.actions;
//export const {initialize} = userSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state: RootState) => state.counter.value;
//export const selectBackBasePath = (state : RootState) => state.serverInfo.backBasePath;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default userSlice.reducer;
